const mongoose = require('mongoose');
const mongoosePaginate = require('mongoose-paginate-v2');

const inwardItemSchema = new mongoose.Schema({
  product: {
    type: mongoose.Schema.Types.Mixed, // Can be ObjectId or String
    required: true
  },
  productName: {
    type: String,
    required: true
  },
  orderedQuantity: {
    type: Number,
    required: true,
    min: 0
  },
  receivedQuantity: {
    type: Number,
    required: true,
    min: 0
  },
  unitCost: {
    type: Number,
    required: true,
    min: 0
  },
  total: {
    type: Number,
    required: true,
    min: 0
  },
  batchNumber: {
    type: String,
    required: true,
    trim: true
  },
  manufacturingDate: {
    type: Date,
    required: true
  },
  expiryDate: {
    type: Date
  },
  notes: {
    type: String,
    trim: true
  }
});

const inwardSchema = new mongoose.Schema({
  grnNumber: {
    type: String,
    required: false, // Will be auto-generated by pre-save hook
    unique: true,
    sparse: true // Allow null/undefined values for unique index
  },
  supplier: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Supplier',
    required: true
  },
  purchaseOrder: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Purchase',
    default: null
  },
  items: [inwardItemSchema],
  totalAmount: {
    type: Number,
    required: true,
    min: 0
  },
  status: {
    type: String,
    enum: ['draft', 'pending', 'approved', 'rejected', 'completed', 'cancelled'],
    default: 'draft'
  },
  receivedDate: {
    type: Date,
    default: Date.now
  },
  invoiceNumber: {
    type: String,
    trim: true
  },
  invoiceDate: {
    type: Date
  },
  deliveryChallanNumber: {
    type: String,
    trim: true
  },
  vehicleNumber: {
    type: String,
    trim: true
  },
  notes: {
    type: String,
    trim: true
  },
  qualityCheckStatus: {
    type: String,
    enum: ['pending', 'passed', 'failed', 'partial'],
    default: 'pending'
  },
  qualityCheckNotes: {
    type: String,
    trim: true
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  approvedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  approvalDate: {
    type: Date
  },
  rejectionReason: {
    type: String,
    trim: true
  }
}, {
  timestamps: true
});

// Add pagination plugin
inwardSchema.plugin(mongoosePaginate);

// Add indexes for better query performance
inwardSchema.index({ supplier: 1, status: 1 });
inwardSchema.index({ receivedDate: -1 });
inwardSchema.index({ status: 1, createdAt: -1 });

// Generate GRN number before validation
inwardSchema.pre('validate', async function(next) {
  if (this.isNew && !this.grnNumber) {
    try {
      console.log('🔢 Generating GRN number...');
      const count = await this.constructor.countDocuments();
      console.log('📊 Current inward count:', count);
      
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0');
      const day = String(today.getDate()).padStart(2, '0');

      this.grnNumber = `GRN-${year}${month}${day}-${String(count + 1).padStart(4, '0')}`;
      console.log('✅ Generated GRN number:', this.grnNumber);
    } catch (error) {
      console.error('❌ Error generating GRN number:', error);
      return next(error);
    }
  }
  next();
});

// Calculate item totals and total amount before saving
inwardSchema.pre('save', function(next) {
  if (this.isModified('items')) {
    // Calculate individual item totals
    this.items.forEach(item => {
      item.total = item.receivedQuantity * item.unitCost;
    });

    // Calculate total amount
    this.totalAmount = this.items.reduce((total, item) => total + item.total, 0);
  }
  next();
});

// Virtual for completion percentage
inwardSchema.virtual('completionPercentage').get(function() {
  if (!this.items || this.items.length === 0) return 0;

  const totalItems = this.items.length;
  const completedItems = this.items.filter(item =>
    item.receivedQuantity >= item.orderedQuantity
  ).length;

  return totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;
});

// Virtual for pending items
inwardSchema.virtual('pendingItems').get(function() {
  return this.items.filter(item => item.receivedQuantity < item.orderedQuantity);
});

// Instance method to check if inward can be modified
inwardSchema.methods.canBeModified = function() {
  return !['approved', 'completed', 'cancelled'].includes(this.status);
};

// Instance method to check if inward can be approved
inwardSchema.methods.canBeApproved = function() {
  return this.status === 'pending';
};

// Static method to get inwards by status
inwardSchema.statics.findByStatus = function(status, options = {}) {
  return this.find({ status }, null, options);
};

// Static method to get inwards by date range
inwardSchema.statics.findByDateRange = function(startDate, endDate, options = {}) {
  return this.find({
    receivedDate: {
      $gte: startDate,
      $lte: endDate
    }
  }, null, options);
};

// Ensure virtual fields are serialized
inwardSchema.set('toJSON', { virtuals: true });
inwardSchema.set('toObject', { virtuals: true });

module.exports = mongoose.model('Inward', inwardSchema);
